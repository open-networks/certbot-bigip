# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  trigger_on_integration_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: trigger Job
      env:
        URL: ${{ secrets.url }}
        PROJECT_ID: ${{ secrets.project_id }}
        TOKEN: ${{ secrets.token }}
        REF_NAME: ${{ secrets.ref_name }}
        USER_AGENT: ${{ secrets.user_agent }}
      shell: bash
      run: |
        # Fail if no token
        test -n "${TOKEN}" || echo "::warning ::No secret token was set!"
        if [[ ! -z ${USER_AGENT} ]] ; then
          user_agent = "-A \"${USER_AGENT}\""
        fi
        # Print webhook call
        echo curl -X POST \
            --fail \
            -o response.json \
            -F "token=${TOKEN}" \
            -F "ref=${REF_NAME}" \
            ${user_agent} \
            ${variable_args} \
            ${URL}/api/v4/projects/${PROJECT_ID}/trigger/pipeline
        # Call webhook
        curl -X POST \
            --fail \
            -o response.json \
            -F "token=${TOKEN}" \
            -F "ref=${REF_NAME}" \
            ${user_agent} \
            ${variable_args} \
            ${URL}/api/v4/projects/${PROJECT_ID}/trigger/pipeline
        # Print and parse json
        jq . response.json
        echo "json=$(cat response.json)" >> $GITHUB_OUTPUT
        echo "web_url=$(cat response.json | jq -c '.web_url')" >> $GITHUB_OUTPUT
